参考资料
http://blog.csdn.net/wizardforcel/article/details/54407212

import matplotlib.pyplot as plt
这一行导入集成的pyplot，我们将在整个系列中使用它。 我们将pyplot导入为plt，这是使用pylot的 python 程序的传统惯例。
plt.plot([1,2,3],[5,7,4])
这个.plot需要许多参数，但前两个是'x'和'y'坐标，我们放入列表。 这意味着，根据这些列表我们拥有 3 个坐标：1,5 2,7和3,4。


2.图例、标题和标签
注：轴域（Axes）即两条坐标轴围城的区域。

import matplotlib.pyplot as plt
x = [1,2,3]
y = [5,7,4]

x2 = [1,2,3]
y2 = [10,14,12]

plt.plot(x, y, label='First Line')
plt.plot(x2, y2, label='Second Line')


添加另一个参数label。 这允许我们为线条指定名称

plt.xlabel('Plot Number')
plt.ylabel('Important var')
plt.title('Interesting Graph\nCheck it out')
plt.legend()
plt.show()
使用plt.xlabel和plt.ylabel，我们可以为这些相应的轴创建标签。 接下来，我们可以使用plt.title创建图的标题，然后我们可以使用plt.legend()生成默认图例
3.条形图和直方图
import matplotlib.pyplot as plt

plt.bar([1,3,5,7,9],[5,2,7,8,2], label="Example one")

plt.bar([2,4,6,8,10],[8,6,2,5,6], label="Example two", color='g')
plt.legend()

plt.xlabel("bar x")
plt.ylabel("bar y")

plt.title("bar example")
plt.show()
plt.bar为我们创建条形图。 如果你没有明确选择一种颜色，那么虽然做了多个图，所有的条看起来会一样。 这让我们有机会使用一个新的 Matplotlib 自定义选项。 你可以在任何类型的绘图中使用颜色，例如g为绿色，b为蓝色，r为红色，等等。 你还可以使用十六进制颜色代码，如#191970。



直方图非常像条形图，倾向于通过将区段组合在一起来显示分布。 这个例子可能是年龄的分组，或测试的分数。 我们并不是显示每一组的年龄，而是按照 20 ~ 25，25 ~ 30… 等等来显示年龄
import matplotlib.pyplot as plt

population_ages = [22,55,62,45,21,22,34,42,42,4,99,102,110,120,121,122,130,111,115,112,80,75,65,54,44,43,42,48]

bins = [0,10,20,30,40,50,60,70,80,90,100,110,120,130]

plt.hist(population_ages, bins, histtype='bar', rwidth=0.8)

plt.xlabel('x')
plt.ylabel('y')
plt.title('Interesting Graph\nCheck it out')
plt.legend()
plt.show()

对于plt.hist，你首先需要放入所有的值，然后指定放入哪个桶或容器。 在我们的例子中，我们绘制了一堆年龄，并希望以 10 年的增量来显示它们。 我们将条形的宽度设为 0.8，但是如果你想让条形变宽，或者变窄，你可以选择其他的宽度。

4.散点图
散点图通常用于比较两个变量来寻找相关性或分组，如果你在 3 维绘制则是 3 个。
import matplotlib.pyplot as plt

x = [1,2,3,4,5,6,7,8]
y = [5,2,4,2,1,4,5,2]

plt.scatter(x,y,label="skitscat",color='k',s=25,marker='o')

plt.xlabel('x')
plt.ylabel('y')
plt.title('Interesting Graph\nCheck it out')
plt.legend()
plt.show()
plt.scatter不仅允许我们绘制x和y，而且还可以让我们决定所使用的标记颜色，大小和类型

